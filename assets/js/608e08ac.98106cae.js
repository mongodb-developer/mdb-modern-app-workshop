"use strict";(self.webpackChunkmongodb_workshop_eventer=self.webpackChunkmongodb_workshop_eventer||[]).push([[236],{338:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>d,toc:()=>a});var r=t(4848),s=t(8453);const o={},i="\ud83e\ude9a\ud83e\ude9b CRUD operation continued",d={id:"structure-site/basic-crud-delete-edit",title:"\ud83e\ude9a\ud83e\ude9b CRUD operation continued",description:"In the previous step, we implemented the create and find operation. In this step, we'll implement the  update, and delete operations in our Eventer application using MongoDB.",source:"@site/docs/40-structure-site/4-basic-crud-delete-edit.mdx",sourceDirName:"40-structure-site",slug:"/structure-site/basic-crud-delete-edit",permalink:"/docs/structure-site/basic-crud-delete-edit",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/docs-mongodb-workshop-eventer/blob/main/docs/40-structure-site/4-basic-crud-delete-edit.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83c\udf05 Basic CRUD operations",permalink:"/docs/structure-site/basic-crud"},next:{title:"\ud83d\udd0e Atlas Search for easy in application full text search",permalink:"/docs/structure-site/atlas-search"}},c={},a=[{value:"Step 3: Update an Event",id:"step-3-update-an-event",level:2},{value:"Step 4: Delete an Event",id:"step-4-delete-an-event",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"-crud-operation-continued",children:"\ud83e\ude9a\ud83e\ude9b CRUD operation continued"}),"\n",(0,r.jsx)(n.p,{children:"In the previous step, we implemented the create and find operation. In this step, we'll implement the  update, and delete operations in our Eventer application using MongoDB."}),"\n",(0,r.jsxs)(n.p,{children:["Our collection under the ",(0,r.jsx)(n.code,{children:"eventer"})," database will be named ",(0,r.jsx)(n.code,{children:"events"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"step-3-update-an-event",children:"Step 3: Update an Event"}),"\n",(0,r.jsxs)(n.p,{children:["In this step, we'll implement the update operation in our Eventer application. We'll allow users to update an existing event by sending a ",(0,r.jsx)(n.code,{children:"PUT"})," request to the server."]}),"\n",(0,r.jsxs)(n.p,{children:["TODO: Implement the route of ",(0,r.jsx)(n.code,{children:"app.put"})," to update an event in ",(0,r.jsx)(n.code,{children:"backend/server.ts"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Docs: ",(0,r.jsx)(n.a,{href:"https://mongodb.github.io/node-mongodb-native/4.1/classes/Collection.html#findOneAndUpdate",children:"findOneAndUpdate"})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Hint"}),(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.code,{children:"findOneAndUpdate"})," with ",(0,r.jsx)(n.code,{children:"$set"})," and ",(0,r.jsx)(n.code,{children:"returnDocument: 'after'"})," clauses on the MongoDB collection to update an existing document."]})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Solution"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// backend/server.ts\napp.put('/api/events/:id', async (req, res) => {\n  const id = req.params.id;\n  const event = req.body;\n  delete event._id; // Remove _id field from the request body\n  try {\n      const result = await db.collection('events').findOneAndUpdate(\n          { _id: new ObjectId(id) },\n          { $set: event },\n          { returnDocument: 'after' }\n      );\n      res.json(result);\n  } catch (error) {\n      console.error('Error updating event:', error);\n      res.status(500).json({ error: 'Error updating event' });\n  }\n});\n"})})]}),"\n",(0,r.jsx)(n.h2,{id:"step-4-delete-an-event",children:"Step 4: Delete an Event"}),"\n",(0,r.jsxs)(n.p,{children:["In this step, we'll implement the delete operation in our Eventer application. We'll allow users to delete an existing event by sending a ",(0,r.jsx)(n.code,{children:"DELETE"})," request to the server."]}),"\n",(0,r.jsxs)(n.p,{children:["TODO: Implement the route of ",(0,r.jsx)(n.code,{children:"app.delete"})," to delete an event in ",(0,r.jsx)(n.code,{children:"backend/server.ts"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Docs : ",(0,r.jsx)(n.a,{href:"https://mongodb.github.io/node-mongodb-native/4.1/classes/Collection.html#deleteOne",children:"deleteOne"})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Hint"}),(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.code,{children:"deleteOne"})," method on the MongoDB collection to remove an existing document. Remember to convert the ",(0,r.jsx)(n.code,{children:"id"})," parameter to an ",(0,r.jsx)(n.code,{children:"ObjectId"}),"."]})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"Solution"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// backend/server.ts\n\napp.delete('/api/events/:id', async (req, res) => {\n    const { id } = req.params;\n    try {\n        const result = await db.collection('events').deleteOne({ _id: new ObjectId(id) });\n        if (result.deletedCount === 0) {\n            res.status(404).json({ error: 'Event not found' });\n            return;\n        }\n        res.json(result.deletedCount);\n    } catch (error) {\n        console.error('Error deleting event:', error);\n        res.status(500).json({ error: 'Error deleting event' });\n    }\n});\n"})})]}),"\n",(0,r.jsx)(n.p,{children:"Great! In this step, we've implemented the update and delete operations in our Eventer application. Now, users can perform all CRUD operations on events using our MongoDB backend. Go test them!"})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>d});var r=t(6540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);