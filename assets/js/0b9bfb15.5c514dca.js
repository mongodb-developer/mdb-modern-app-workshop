"use strict";(self.webpackChunkmongodb_workshop_eventer=self.webpackChunkmongodb_workshop_eventer||[]).push([[558],{4534:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var s=t(4848),r=t(8453);const o={},i="\ud83c\udf05 Basic CRUD operations",a={id:"structure-site/basic-crud",title:"\ud83c\udf05 Basic CRUD operations",description:'In this step, we"ll implement basic CRUD (Create, Read, Update, Delete) operations in our Eventer application using MongoDB. We"ll start by creating a new event, fetching all events, updating an event, and deleting an event.',source:"@site/docs/40-structure-site/3-basic-crud.mdx",sourceDirName:"40-structure-site",slug:"/structure-site/basic-crud",permalink:"/docs/structure-site/basic-crud",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/docs-mongodb-workshop-eventer/blob/main/docs/40-structure-site/3-basic-crud.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83e\udde9 Connecting Eventer backend with MongoDB",permalink:"/docs/structure-site/mongo-connection"},next:{title:"\ud83e\ude9a\ud83e\ude9b CRUD operation continued",permalink:"/docs/structure-site/basic-crud-delete-edit"}},c={},d=[{value:"Step 2: Create a New Event",id:"step-2-create-a-new-event",level:2},{value:"Step 2: Get All Events",id:"step-2-get-all-events",level:2},{value:"Step 4: Get a Single Event",id:"step-4-get-a-single-event",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"-basic-crud-operations",children:"\ud83c\udf05 Basic CRUD operations"}),"\n",(0,s.jsx)(n.p,{children:'In this step, we"ll implement basic CRUD (Create, Read, Update, Delete) operations in our Eventer application using MongoDB. We"ll start by creating a new event, fetching all events, updating an event, and deleting an event.'}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:'Please note that our intention is to replace the mock data with MongoDB operations. We"ll be using the MongoDB Node.js driver to interact with our database.'})}),"\n",(0,s.jsxs)(n.p,{children:["Our collection under the ",(0,s.jsx)(n.code,{children:"eventer"})," database will be named ",(0,s.jsx)(n.code,{children:"events"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Lets first populate our MongoDB database with some sample data using the Data Explorer or Compass."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:' [\n  {\n    "name": "Summer Festival",\n    "description": "Annual music festival",\n    "date": "2024-07-15",\n    "location": {\n      "name": "New York",\n      "address": {\n        "type": "Point",\n        "coordinates": [-73.935242, 40.73061]\n      }\n    }\n  },\n  {\n    "name": "Tech Conference",\n    "description": "Latest in tech innovations",\n    "date": "2024-09-20",\n    "location": {\n      "name": "New York",\n      "address": {\n        "type": "Point",\n        "coordinates": [-73.955242, 40.75061]\n      }\n    },\n    "startTime": "10:00",\n    "endTime": "18:00",\n    "useAttendeeList": true,\n    "attendees": ["Alice", "Bob"],\n    "maxAttendees": 100\n  },\n  {\n    "name": "Food Fair",\n    "description": "Taste cuisines from around the world",\n    "date": "2024-08-05",\n    "location": {\n      "name": "San Francisco",\n      "address": {\n        "type": "Point",\n        "coordinates": [-122.4192363, 37.7749295]\n      }\n    },\n    "paymentRequired": true,\n    "paymentAmount": 20,\n    "paymentDueDate": "2024-07-15"\n  },\n  {\n    "name": "Music Awards",\n    "description": "Music awards show",\n    "date": "2024-11-10",\n    "location": {\n      "name": "San Francisco",\n      "address": {\n        "type": "Point",\n        "coordinates": [-122.4192363, 37.7749295]\n      }\n    }\n  },\n  {\n    "name": "Film Festival",\n    "description": "Celebrating independent films",\n    "date": "2024-10-30",\n    "location": {\n      "name": "New York",\n      "address": {\n        "type": "Point",\n        "coordinates": [-73.935242, 40.73061]\n      }\n    },\n    "attendees": ["John", "Jane"],\n    "maxAttendees": 1000,\n    "startTime": "10:00",\n    "useAttendeeList": true\n  },\n  {\n    "name": "Wine Tasting",\n    "description": "Sample wines from around the world",\n    "date": "2024-06-20",\n    "location": {\n      "name": "San Francisco",\n      "address": {\n        "type": "Point",\n        "coordinates": [-122.4192363, 37.7749295]\n      }\n    }\n  }\n]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"step-2-create-a-new-event",children:"Step 2: Create a New Event"}),"\n",(0,s.jsx)(n.p,{children:"Your first task is to create a new event in the MongoDB database."}),"\n",(0,s.jsxs)(n.p,{children:["TODO: Implement the route of ",(0,s.jsx)(n.code,{children:"app.post"})," to create a new event in ",(0,s.jsx)(n.code,{children:"backend/server.js"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Docs: ",(0,s.jsx)(n.a,{href:"https://www.mongodb.com/docs/drivers/node/current/fundamentals/crud/write-operations/insert/#insert-a-single-document",children:"insertOne"})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Hint"}),(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.code,{children:"insertOne"})," method on the MongoDB collection to insert a new document."]})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Solution"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// backend/server.ts\n\napp.post("/api/events", async (req, res) => {\n    const event = req.body;\n    try {\n\n        const result = await db.collection("events").insertOne(event);\n        res.json(result.insertedId);\n    }\n    catch (error) {\n        console.error("Error creating event:", error);\n        res.status(500).json({ error: "Error creating event" });\n    }\n});\n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"step-2-get-all-events",children:"Step 2: Get All Events"}),"\n",(0,s.jsx)(n.p,{children:"Your first task is to fetch all events from the MongoDB database."}),"\n",(0,s.jsxs)(n.p,{children:["TODO: Implement the route of ",(0,s.jsx)(n.code,{children:"app.get"})," to fetch all events from the database in ",(0,s.jsx)(n.code,{children:"backend/server.js"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Docs : ",(0,s.jsx)(n.a,{href:"https://www.mongodb.com/docs/drivers/node/current/usage-examples/find/",children:"find"})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Hint"}),(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.code,{children:"find"})," method on the MongoDB collection to fetch all documents."]})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Solution"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// backend/server.ts\n\napp.get("/api/events", async (req, res) => {\n    try {\n    // TODO: Serve from MongoDB\n        const dbEvents = await db.collection("events").find().toArray();\n        res.json(dbEvents);\n    }\n    catch (error) {\n        console.error("Error fetching events:", error);\n        res.status(500).json({ error: "Error fetching events" });\n    }\n});\n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"step-4-get-a-single-event",children:"Step 4: Get a Single Event"}),"\n",(0,s.jsxs)(n.p,{children:["Your next task is to fetch a single event by its ID from the MongoDB database. Be mindful that the ID is a ",(0,s.jsx)(n.code,{children:"ObjectId"})," type."]}),"\n",(0,s.jsxs)(n.p,{children:["TODO: Implement the route of ",(0,s.jsx)(n.code,{children:"app.get"})," to fetch a single event by ID in ",(0,s.jsx)(n.code,{children:"backend/server.js"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Docs: ",(0,s.jsx)(n.a,{href:"https://www.mongodb.com/docs/drivers/node/current/usage-examples/findOne/",children:"findOne"})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Hint"}),(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.code,{children:"findOne"})," method on the MongoDB collection to fetch a single document by its ID. Remember to use ",(0,s.jsx)(n.code,{children:"ObjectId"})," to convert the string ID to the correct type."]})]}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"Solution"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// backend/server.ts\n\nimport {ObjectId} from \'mongodb\';\n\n\n\napp.get("/api/events/:id", async (req, res) => {\n    const id = req.params.id;\n    try {\n        const event = await db.collection("events").findOne({ _id: new ObjectId(id) });\n        if (!event) {\n            res.status(404).json({ error: "Event not found" });\n            return;\n        }\n        res.json(event);\n    }\n    catch (error) {\n        console.error("Error fetching event:", error);\n        res.status(500).json({ error: "Error fetching event" });\n    }\n});\n'})})]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(6540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);