"use strict";(self.webpackChunkmongodb_workshop_eventer=self.webpackChunkmongodb_workshop_eventer||[]).push([[243],{6890:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var o=n(4848),s=n(8453);const r={},a="\ud83d\udc50 Update the AI bot to have context",c={id:"AI-Bonus/update-routes",title:"\ud83d\udc50 Update the AI bot to have context",description:"We're now ready to implement changes to our AI bot to include context. This will allow the bot to provide more accurate responses to user queries.",source:"@site/docs/50-AI-Bonus/6-update-routes.mdx",sourceDirName:"50-AI-Bonus",slug:"/AI-Bonus/update-routes",permalink:"/mdb-modern-app-workshop/docs/AI-Bonus/update-routes",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/mdb-modern-app-workshop/blob/main/docs/50-AI-Bonus/6-update-routes.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udc50 Create Vector Search indexes",permalink:"/mdb-modern-app-workshop/docs/AI-Bonus/create-index"},next:{title:"\ud83c\udfaf Summary",permalink:"/mdb-modern-app-workshop/docs/summary"}},i={},d=[{value:"Add the semantic search context",id:"add-the-semantic-search-context",level:2},{value:"Add a vector query to the bot",id:"add-a-vector-query-to-the-bot",level:2},{value:"Test your code",id:"test-your-code",level:2},{value:"Update the app to embed the built assistant",id:"update-the-app-to-embed-the-built-assistant",level:2},{value:"Test it out",id:"test-it-out",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components},{Details:n,Screenshot:r}=t;return n||u("Details",!0),r||u("Screenshot",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"-update-the-ai-bot-to-have-context",children:"\ud83d\udc50 Update the AI bot to have context"}),"\n",(0,o.jsx)(t.p,{children:"We're now ready to implement changes to our AI bot to include context. This will allow the bot to provide more accurate responses to user queries."}),"\n",(0,o.jsx)(t.h2,{id:"add-the-semantic-search-context",children:"Add the semantic search context"}),"\n",(0,o.jsxs)(t.p,{children:["Let's edit the ",(0,o.jsx)(t.code,{children:"backend/chainlit/server.py"})," file and add the following functions code:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'async def getEmbedding(query):\n\n    queryVector =  await client.embeddings.create(\n        model="text-embedding-3-small",\n        input=query,\n    )\n    query_vec = queryVector.data[0].embedding\n   \n    return query_vec\n'})}),"\n",(0,o.jsx)(t.p,{children:"This function will take a query and return the vector embedding for that query. Similar to the way the documents are embedded, we'll use this function to embed the user's query."}),"\n",(0,o.jsx)(t.h2,{id:"add-a-vector-query-to-the-bot",children:"Add a vector query to the bot"}),"\n",(0,o.jsxs)(t.p,{children:["Next, let's add a function to query the database based on the user's query. Add the following code to the ",(0,o.jsx)(t.code,{children:"backend/chainlit/server.py"})," file:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"\n def getContext(embedding):\n    docs = []\n    ## Implement your context $vectorSearch aggregation here\n    docs = list(collection.aggregate ... )\n    \n    return docs\n"})}),"\n",(0,o.jsx)(t.p,{children:"As you can notice we are returning an empty list for now."}),"\n",(0,o.jsxs)(t.p,{children:["TODO : We will implement the context search in the next step with an ",(0,o.jsx)(t.a,{href:"https://www.mongodb.com/docs/atlas/atlas-vector-search/vector-search-stage/",children:"Atlas vector search"}),"."]}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:"Hint"}),(0,o.jsxs)(t.p,{children:["You can use the ",(0,o.jsx)(t.code,{children:"$vectorSearch"})," aggregation stage to search for documents based on the user's query vector. Syntax:"]}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'docs = list(collection.aggregate([\n    {\n        "$vectorSearch": {\n            "index": "vector_index",\n                "queryVector": <vector>,\n                "path": <your_embedding>,\n                "numCandidates" : 20,\n                "limit" : 10\n            }\n        }\n]))\n'})})]}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:"Solution"}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"def getContext(embedding):\n    docs = []\n    docs = list(collection.aggregate([\n       {\n            '$vectorSearch': {\n                'index': 'vector_index', \n                'queryVector': embedding, \n                'path': 'embedding', \n                'numCandidates' : 20,\n                'limit' : 10\n            }},\n            { '$project' : {\n              'embedding'  : 0\n            } }\n    ]))\n\n    return docs\n"})})]}),"\n",(0,o.jsx)(t.p,{children:"Once done lets use this function to get the context for the user query."}),"\n",(0,o.jsxs)(t.p,{children:["Uncomment the lines in ",(0,o.jsx)(t.code,{children:"on_message(message: cl.Message)"})," function to provide context to the AI model."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'@cl.on_message\nasync def on_message(message: cl.Message):\n    context=""\n    embedding = await getEmbedding(message.content)\n    context = getContext(embedding)\n    response = await client.chat.completions.create(\n        messages=[\n            {\n                "content": "You are a helpful assistant, please respond to user searches on events and their details.",\n                "role": "system"\n            },\n            {\n                "content": f" With the relevant context: {context} \\n Assist with to the user message {message.content}. If you don\'t see the details in cotext please respond that you could not find any details for that query.",\n                "role": "user"\n            }\n        ],\n        **settings\n    )\n    await cl.Message(content=response.choices[0].message.content).send()\n'})}),"\n",(0,o.jsx)(t.h2,{id:"test-your-code",children:"Test your code"}),"\n",(0,o.jsx)(t.p,{children:"Lets restart the chainlit server:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"chainlit run chainlit/server.py\n"})}),"\n",(0,o.jsx)(t.p,{children:"Now, you can test the bot with a query. You should see the context sections from the database that are relevant to the query."}),"\n",(0,o.jsx)(t.h2,{id:"update-the-app-to-embed-the-built-assistant",children:"Update the app to embed the built assistant"}),"\n",(0,o.jsxs)(t.p,{children:["To add the chainlit assistant to the app, we need to update the ",(0,o.jsx)(t.code,{children:"frontend/public/index.html"})," file, on the buttom."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-html",children:'<body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id="root"></div>\n    \x3c!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the <body> tag.\n\n      To begin the development, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    --\x3e\n    <script src="http://localhost:8000/copilot/index.js"><\/script>\n      <script>\n        window.mountChainlitWidget({\n          chainlitServer: "http://localhost:8000",\n        });\n      <\/script>\n  </body>\n'})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"chainlitServer"})," should point to the server where the chainlit server is running. As well as the ",(0,o.jsx)(t.code,{children:"src"})," should point to the chainlit copilot."]}),"\n",(0,o.jsx)(t.h2,{id:"test-it-out",children:"Test it out"}),"\n",(0,o.jsx)(t.p,{children:"Now you can test the app with the updated AI bot. The bot should now provide more accurate responses based on the context of the user's query."}),"\n",(0,o.jsx)(r,{src:"img/screenshots/7-vector-search/6-create-index/FestivalQ.png",alt:"Festival Question",url:"http://localhost:3000"}),"\n",(0,o.jsx)(t.p,{children:"Congratulations! You have successfully updated the AI bot to include context."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}function u(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var o=n(6540);const s={},r=o.createContext(s);function a(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);