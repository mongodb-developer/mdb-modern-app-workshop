"use strict";(self.webpackChunkmongodb_workshop_eventer=self.webpackChunkmongodb_workshop_eventer||[]).push([[514],{8691:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var t=o(4848),r=o(8453);const s={sidebar_position:2},c="\ud83e\udde9 Connecting Eventer backend with MongoDB",i={id:"structure-site/mongo-connection",title:"\ud83e\udde9 Connecting Eventer backend with MongoDB",description:"In this section, we'll guide you through building the core functionality of Eventer using MongoDB Atlas connection. Each step will present a challenge for you to solve, with hints and solutions available if you need them.",source:"@site/docs/40-structure-site/2-mongo-connection.mdx",sourceDirName:"40-structure-site",slug:"/structure-site/mongo-connection",permalink:"/mdb-modern-app-workshop/docs/structure-site/mongo-connection",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/mdb-modern-app-workshop/blob/main/docs/40-structure-site/2-mongo-connection.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"\u2699\ufe0f Application Structure",permalink:"/mdb-modern-app-workshop/docs/structure-site/docusaurus-config"},next:{title:"\ud83c\udf05 Basic CRUD operations",permalink:"/mdb-modern-app-workshop/docs/structure-site/basic-crud"}},a={},l=[{value:"Install the MongoDB Node.js Driver",id:"install-the-mongodb-nodejs-driver",level:2},{value:"Step 1: Connecting to MongoDB Atlas",id:"step-1-connecting-to-mongodb-atlas",level:2},{value:"Step 2: Connect server.ts with database.ts",id:"step-2-connect-serverts-with-databasets",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"-connecting-eventer-backend-with-mongodb",children:"\ud83e\udde9 Connecting Eventer backend with MongoDB"}),"\n",(0,t.jsx)(e.p,{children:"In this section, we'll guide you through building the core functionality of Eventer using MongoDB Atlas connection. Each step will present a challenge for you to solve, with hints and solutions available if you need them."}),"\n",(0,t.jsx)(e.h2,{id:"install-the-mongodb-nodejs-driver",children:"Install the MongoDB Node.js Driver"}),"\n",(0,t.jsx)(e.p,{children:"Before we can connect to MongoDB, we need to install the MongoDB Node.js driver. This package allows us to interact with MongoDB from our Node.js application."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"npm install mongodb\nnpm install --save-dev @types/mongodb\n"})}),"\n",(0,t.jsx)(e.h2,{id:"step-1-connecting-to-mongodb-atlas",children:"Step 1: Connecting to MongoDB Atlas"}),"\n",(0,t.jsxs)(e.p,{children:["Docs :  ",(0,t.jsx)(e.a,{href:"https://www.mongodb.com/docs/drivers/node/current/fundamentals/connection/connect/#std-label-node-connect-to-mongodb",children:"MongoDB Node.js Driver"})]}),"\n",(0,t.jsxs)(e.p,{children:["First we need to setup our connection string at ",(0,t.jsx)(e.code,{children:"backend/.env"})," file:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"MONGODB_ATLAS_URI=your-atlas-uri\n"})}),"\n",(0,t.jsxs)(e.p,{children:["Let's create a database helper file at ",(0,t.jsx)(e.code,{children:"backend/database.ts"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"import { MongoClient, Db } from 'mongodb';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst uri: string = process.env.MONGODB_ATLAS_URI || '';\n\nclass mongoConnection {\n  private client: MongoClient;\n\n  constructor() {\n    this.client = new MongoClient(uri);\n  }\n\n  async connect(): Promise<Db> {\n    try {\n      await this.client.connect();\n      console.log('Connected to MongoDB');\n      return this.client.db('eventer');\n    } catch (error) {\n      console.error('Error connecting to MongoDB:', error);\n      throw error;\n    }\n  }\n\n  async close(): Promise<void> {\n    try {\n      await this.client.close();\n      console.log('Disconnected from MongoDB');\n    } catch (error) {\n      console.error('Error disconnecting from MongoDB:', error);\n      throw error;\n    }\n  }\n}\n\nexport const connectToMongoDB = new mongoConnection();\n"})}),"\n",(0,t.jsx)(e.h2,{id:"step-2-connect-serverts-with-databasets",children:"Step 2: Connect server.ts with database.ts"}),"\n",(0,t.jsxs)(e.p,{children:["In order to use the MongoDB connection in our Express server, we need to import the ",(0,t.jsx)(e.code,{children:"connectToMongoDB"})," function and call it when the server starts."]}),"\n",(0,t.jsxs)(e.p,{children:["Lets edit ",(0,t.jsx)(e.code,{children:"backend/server.ts"})," to adjust the following code:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"import express from 'express';\nimport cors from 'cors';\nimport { Event } from './types';\nimport { v4 as uuidv4 } from 'uuid';\nimport { connectToMongoDB } from './database';\nimport { Db } from 'mongodb';\n\nconst app = express();\nconst port = 5000;\n\napp.use(cors());\napp.use(express.json());\n\nlet db: Db;\n\nasync function initializeMongoDB() {\n  try {\n    db = await connectToMongoDB.connect();\n    console.log('MongoDB connected successfully');\n  } catch (error) {\n    console.error('Failed to connect to MongoDB', error);\n    process.exit(1);\n  }\n}\n\n// Rest of the API routes\n\ninitializeMongoDB().then(() => {\n\n  app.listen(port, () => {\n    console.log(`Server running at http://localhost:${port}`);\n  });\n});\n\n"})}),"\n",(0,t.jsx)(e.p,{children:"Great job! You've successfully connected your Eventer backend with MongoDB Atlas. In the next steps, we'll implement CRUD operations and explore more advanced MongoDB features."})]})}function p(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,o)=>{o.d(e,{R:()=>c,x:()=>i});var t=o(6540);const r={},s=t.createContext(r);function c(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:c(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);